{"version":3,"sources":["../server/index.js"],"names":["express","require","bodyParser","cors","path","db","routes","port","process","env","PORT","app","use","json","urlencoded","extended","req","res","next","extname","length","error","Error","err","console","stack","status","send","message","syncDb","sequelize","sync","then","listen","log"],"mappings":";;;;;;;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMI,EAAE,GAAGJ,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAMK,MAAM,GAAGL,OAAO,CAAC,UAAD,CAAtB;;AAEA,IAAMM,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACA,IAAMC,GAAG,GAAGX,OAAO,EAAnB;AAEAW,GAAG,CAACC,GAAJ,CAAQV,UAAU,CAACW,IAAX,EAAR;AACAF,GAAG,CAACC,GAAJ,CAAQV,UAAU,CAACY,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR;AACAJ,GAAG,CAACC,GAAJ,CAAQT,IAAI,EAAZ,E,CAEA;AACA;AACA;AACA;AACA;AAEA;;AAEAQ,GAAG,CAACC,GAAJ,CAAQ,UAACI,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B,MAAId,IAAI,CAACe,OAAL,CAAaH,GAAG,CAACZ,IAAjB,EAAuBgB,MAA3B,EAAmC;AACjC,QAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAV,CAAd,CADiC,CAEjC;;AACAJ,IAAAA,IAAI,CAACG,KAAD,CAAJ;AACD,GAJD,MAIOH,IAAI;AACZ,CAND,E,CAQA;;AACAP,GAAG,CAACC,GAAJ,CAAQ,UAACW,GAAD,EAAMP,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AAC/BM,EAAAA,OAAO,CAACH,KAAR,CAAcE,GAAd;AACAC,EAAAA,OAAO,CAACH,KAAR,CAAcE,GAAG,CAACE,KAAlB;AACAR,EAAAA,GAAG,CAACS,MAAJ,CAAWH,GAAG,CAACG,MAAJ,IAAc,GAAzB,EAA8BC,IAA9B,CAAmCJ,GAAG,CAACK,OAAJ,IAAe,wBAAlD;AACD,CAJD;;AAMA,IAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,SACbxB,EAAE,CAACyB,SAAH,CAAaC,IAAb,GAAoBC,IAApB,CAAyB,YAAM;AAC7BrB,IAAAA,GAAG,CAACsB,MAAJ,CAAW1B,IAAX,EAAiB,YAAM;AACrBiB,MAAAA,OAAO,CAACU,GAAR,qCAAyC3B,IAAzC;AACD,KAFD;AAGD,GAJD,CADa;AAAA,CAAf;;AAMAsB,MAAM;eAESxB,E","sourcesContent":["const express = require('express');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst path = require('path');\nconst db = require('./db');\nconst routes = require('./routes');\n\nconst port = process.env.PORT || 8000;\nconst app = express();\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(cors());\n\n// app.get('/', (req, res, next) => {\n//   console.log('Hello World');\n//   res.send('Hello World');\n//   next();\n// });\n\n// app.use('/api', routes);\n\napp.use((req, res, next) => {\n  if (path.extname(req.path).length) {\n    const error = new Error('Not Found');\n    // res.status(404);\n    next(error);\n  } else next();\n});\n\n// error handling endware\napp.use((err, req, res, next) => {\n  console.error(err);\n  console.error(err.stack);\n  res.status(err.status || 500).send(err.message || 'Internal server error.');\n});\n\nconst syncDb = () =>\n  db.sequelize.sync().then(() => {\n    app.listen(port, () => {\n      console.log(`Server is running on PORT ${port}`);\n    });\n  });\nsyncDb();\n\nexport default db;\n"],"file":"index.js"}